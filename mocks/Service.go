// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/aeramu/menfess-backend/service/api"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, req
func (_m *Service) CreatePost(ctx context.Context, req api.CreatePostReq) (*api.CreatePostRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.CreatePostRes
	if rf, ok := ret.Get(0).(func(context.Context, api.CreatePostReq) *api.CreatePostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CreatePostRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.CreatePostReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenfessList provides a mock function with given fields: ctx, req
func (_m *Service) GetMenfessList(ctx context.Context, req api.GetMenfessListReq) (*api.GetMenfessListRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.GetMenfessListRes
	if rf, ok := ret.Get(0).(func(context.Context, api.GetMenfessListReq) *api.GetMenfessListRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetMenfessListRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetMenfessListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: ctx, req
func (_m *Service) GetPost(ctx context.Context, req api.GetPostReq) (*api.GetPostRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.GetPostRes
	if rf, ok := ret.Get(0).(func(context.Context, api.GetPostReq) *api.GetPostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetPostRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetPostReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostList provides a mock function with given fields: ctx, req
func (_m *Service) GetPostList(ctx context.Context, req api.GetPostListReq) (*api.GetPostListRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.GetPostListRes
	if rf, ok := ret.Get(0).(func(context.Context, api.GetPostListReq) *api.GetPostListRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetPostListRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetPostListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, req
func (_m *Service) GetUser(ctx context.Context, req api.GetUserReq) (*api.GetUserRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.GetUserRes
	if rf, ok := ret.Get(0).(func(context.Context, api.GetUserReq) *api.GetUserRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetUserRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetUserReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikePost provides a mock function with given fields: ctx, req
func (_m *Service) LikePost(ctx context.Context, req api.LikePostReq) (*api.LikePostRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.LikePostRes
	if rf, ok := ret.Get(0).(func(context.Context, api.LikePostReq) *api.LikePostRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LikePostRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.LikePostReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *Service) Login(ctx context.Context, req api.LoginReq) (*api.LoginRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.LoginRes
	if rf, ok := ret.Get(0).(func(context.Context, api.LoginReq) *api.LoginRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LoginRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.LoginReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, req
func (_m *Service) Logout(ctx context.Context, req api.LogoutReq) (*api.LogoutRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.LogoutRes
	if rf, ok := ret.Get(0).(func(context.Context, api.LogoutReq) *api.LogoutRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LogoutRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.LogoutReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *Service) Register(ctx context.Context, req api.RegisterReq) (*api.RegisterRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.RegisterRes
	if rf, ok := ret.Get(0).(func(context.Context, api.RegisterReq) *api.RegisterRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.RegisterRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.RegisterReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, req
func (_m *Service) UpdateProfile(ctx context.Context, req api.UpdateProfileReq) (*api.UpdateProfileRes, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.UpdateProfileRes
	if rf, ok := ret.Get(0).(func(context.Context, api.UpdateProfileReq) *api.UpdateProfileRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UpdateProfileRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.UpdateProfileReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
